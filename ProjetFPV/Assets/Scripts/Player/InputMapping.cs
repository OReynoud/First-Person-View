//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/InputMapping.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMapping: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMapping()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMapping"",
    ""maps"": [
        {
            ""name"": ""ControlsLeftShoot"",
            ""id"": ""fd6646f9-e396-4d43-82b1-0c9536a2d666"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""26674d78-524c-47eb-8d52-56a53016e983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""98fe5cc8-bb30-4017-bff0-586f9dd733b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""ed5db918-c669-4a7f-bf13-694c93fb13d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""c317b51a-553b-4788-9f3b-79353c52a7ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""46539186-0e6b-490d-939d-62aa1e127874"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSprint"",
                    ""type"": ""Button"",
                    ""id"": ""6261dffc-8265-46ba-b04c-044a2a20e77e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""531c8648-5b2c-494d-a87e-36b2821fb193"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Telekinesis"",
                    ""type"": ""Button"",
                    ""id"": ""1695d28f-d191-4966-bbfd-a478a6eafdb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee6345f7-c4ce-4637-8121-cc9f8cd47e21"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e32bd68-dd71-4432-999a-97db3c9b1d43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c33627b1-34b5-45f4-8ce7-5648cd8b904c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c398b83f-84ee-4b30-bdf0-d7cc6ad10033"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6827cb36-6119-4a82-b939-7947e52b6fd2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14823f61-26eb-46c1-b964-e08829c2c634"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e432fc3-bc1d-4fe3-8291-a9a358862bde"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""089bc123-ee2d-4b0b-8bf2-aed5a0afa3cd"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Telekinesis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControlsRightShoot"",
            ""id"": ""bedeea23-e5f3-424a-b90c-7a4962ca7052"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""bf1c9578-b4f9-41db-b96d-d15afa0f156e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""Button"",
                    ""id"": ""9f079e25-b074-46a9-ba4e-461c0f97fd1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""8d295bc4-b36f-48de-958b-e150e0992ca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""68992aa0-c57c-479d-900f-ed230cda7e1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d223c02d-be10-4c86-bdcf-d7169c1d3025"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSprint"",
                    ""type"": ""Button"",
                    ""id"": ""a99613d8-8de7-424d-b1cd-d4b208e93c09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""8185337f-8ae7-4416-83a4-eb122b3bdafb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Telekinesis"",
                    ""type"": ""Button"",
                    ""id"": ""31afc33a-42d0-42db-b206-b634e9baa744"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f0b11d9d-fb05-4488-9e93-0ad5ad395998"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cafd1f49-1f43-4cf4-9e2f-eabba66253f4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9155e63c-a4c9-4966-9443-22f40eefc198"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d29d18f0-ce54-486f-b122-493a7b6a77fa"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79af3f48-d9d5-4cc8-8aa2-60c831b941dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aea66730-1eee-4c8b-8aa2-ceddef3dc051"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""267ec26a-5ccf-4fe0-b6a7-ad276ba27e05"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abb4caf2-8f90-464a-ae2d-dfb10023b497"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Telekinesis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlsLeftShoot
        m_ControlsLeftShoot = asset.FindActionMap("ControlsLeftShoot", throwIfNotFound: true);
        m_ControlsLeftShoot_Forward = m_ControlsLeftShoot.FindAction("Forward", throwIfNotFound: true);
        m_ControlsLeftShoot_Backward = m_ControlsLeftShoot.FindAction("Backward", throwIfNotFound: true);
        m_ControlsLeftShoot_Right = m_ControlsLeftShoot.FindAction("Right", throwIfNotFound: true);
        m_ControlsLeftShoot_Left = m_ControlsLeftShoot.FindAction("Left", throwIfNotFound: true);
        m_ControlsLeftShoot_Jump = m_ControlsLeftShoot.FindAction("Jump", throwIfNotFound: true);
        m_ControlsLeftShoot_ToggleSprint = m_ControlsLeftShoot.FindAction("ToggleSprint", throwIfNotFound: true);
        m_ControlsLeftShoot_Shoot = m_ControlsLeftShoot.FindAction("Shoot", throwIfNotFound: true);
        m_ControlsLeftShoot_Telekinesis = m_ControlsLeftShoot.FindAction("Telekinesis", throwIfNotFound: true);
        // ControlsRightShoot
        m_ControlsRightShoot = asset.FindActionMap("ControlsRightShoot", throwIfNotFound: true);
        m_ControlsRightShoot_Forward = m_ControlsRightShoot.FindAction("Forward", throwIfNotFound: true);
        m_ControlsRightShoot_Backward = m_ControlsRightShoot.FindAction("Backward", throwIfNotFound: true);
        m_ControlsRightShoot_Right = m_ControlsRightShoot.FindAction("Right", throwIfNotFound: true);
        m_ControlsRightShoot_Left = m_ControlsRightShoot.FindAction("Left", throwIfNotFound: true);
        m_ControlsRightShoot_Jump = m_ControlsRightShoot.FindAction("Jump", throwIfNotFound: true);
        m_ControlsRightShoot_ToggleSprint = m_ControlsRightShoot.FindAction("ToggleSprint", throwIfNotFound: true);
        m_ControlsRightShoot_Shoot = m_ControlsRightShoot.FindAction("Shoot", throwIfNotFound: true);
        m_ControlsRightShoot_Telekinesis = m_ControlsRightShoot.FindAction("Telekinesis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlsLeftShoot
    private readonly InputActionMap m_ControlsLeftShoot;
    private List<IControlsLeftShootActions> m_ControlsLeftShootActionsCallbackInterfaces = new List<IControlsLeftShootActions>();
    private readonly InputAction m_ControlsLeftShoot_Forward;
    private readonly InputAction m_ControlsLeftShoot_Backward;
    private readonly InputAction m_ControlsLeftShoot_Right;
    private readonly InputAction m_ControlsLeftShoot_Left;
    private readonly InputAction m_ControlsLeftShoot_Jump;
    private readonly InputAction m_ControlsLeftShoot_ToggleSprint;
    private readonly InputAction m_ControlsLeftShoot_Shoot;
    private readonly InputAction m_ControlsLeftShoot_Telekinesis;
    public struct ControlsLeftShootActions
    {
        private @InputMapping m_Wrapper;
        public ControlsLeftShootActions(@InputMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_ControlsLeftShoot_Forward;
        public InputAction @Backward => m_Wrapper.m_ControlsLeftShoot_Backward;
        public InputAction @Right => m_Wrapper.m_ControlsLeftShoot_Right;
        public InputAction @Left => m_Wrapper.m_ControlsLeftShoot_Left;
        public InputAction @Jump => m_Wrapper.m_ControlsLeftShoot_Jump;
        public InputAction @ToggleSprint => m_Wrapper.m_ControlsLeftShoot_ToggleSprint;
        public InputAction @Shoot => m_Wrapper.m_ControlsLeftShoot_Shoot;
        public InputAction @Telekinesis => m_Wrapper.m_ControlsLeftShoot_Telekinesis;
        public InputActionMap Get() { return m_Wrapper.m_ControlsLeftShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsLeftShootActions set) { return set.Get(); }
        public void AddCallbacks(IControlsLeftShootActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsLeftShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsLeftShootActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @ToggleSprint.started += instance.OnToggleSprint;
            @ToggleSprint.performed += instance.OnToggleSprint;
            @ToggleSprint.canceled += instance.OnToggleSprint;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Telekinesis.started += instance.OnTelekinesis;
            @Telekinesis.performed += instance.OnTelekinesis;
            @Telekinesis.canceled += instance.OnTelekinesis;
        }

        private void UnregisterCallbacks(IControlsLeftShootActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @ToggleSprint.started -= instance.OnToggleSprint;
            @ToggleSprint.performed -= instance.OnToggleSprint;
            @ToggleSprint.canceled -= instance.OnToggleSprint;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Telekinesis.started -= instance.OnTelekinesis;
            @Telekinesis.performed -= instance.OnTelekinesis;
            @Telekinesis.canceled -= instance.OnTelekinesis;
        }

        public void RemoveCallbacks(IControlsLeftShootActions instance)
        {
            if (m_Wrapper.m_ControlsLeftShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsLeftShootActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsLeftShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsLeftShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsLeftShootActions @ControlsLeftShoot => new ControlsLeftShootActions(this);

    // ControlsRightShoot
    private readonly InputActionMap m_ControlsRightShoot;
    private List<IControlsRightShootActions> m_ControlsRightShootActionsCallbackInterfaces = new List<IControlsRightShootActions>();
    private readonly InputAction m_ControlsRightShoot_Forward;
    private readonly InputAction m_ControlsRightShoot_Backward;
    private readonly InputAction m_ControlsRightShoot_Right;
    private readonly InputAction m_ControlsRightShoot_Left;
    private readonly InputAction m_ControlsRightShoot_Jump;
    private readonly InputAction m_ControlsRightShoot_ToggleSprint;
    private readonly InputAction m_ControlsRightShoot_Shoot;
    private readonly InputAction m_ControlsRightShoot_Telekinesis;
    public struct ControlsRightShootActions
    {
        private @InputMapping m_Wrapper;
        public ControlsRightShootActions(@InputMapping wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_ControlsRightShoot_Forward;
        public InputAction @Backward => m_Wrapper.m_ControlsRightShoot_Backward;
        public InputAction @Right => m_Wrapper.m_ControlsRightShoot_Right;
        public InputAction @Left => m_Wrapper.m_ControlsRightShoot_Left;
        public InputAction @Jump => m_Wrapper.m_ControlsRightShoot_Jump;
        public InputAction @ToggleSprint => m_Wrapper.m_ControlsRightShoot_ToggleSprint;
        public InputAction @Shoot => m_Wrapper.m_ControlsRightShoot_Shoot;
        public InputAction @Telekinesis => m_Wrapper.m_ControlsRightShoot_Telekinesis;
        public InputActionMap Get() { return m_Wrapper.m_ControlsRightShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsRightShootActions set) { return set.Get(); }
        public void AddCallbacks(IControlsRightShootActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsRightShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsRightShootActionsCallbackInterfaces.Add(instance);
            @Forward.started += instance.OnForward;
            @Forward.performed += instance.OnForward;
            @Forward.canceled += instance.OnForward;
            @Backward.started += instance.OnBackward;
            @Backward.performed += instance.OnBackward;
            @Backward.canceled += instance.OnBackward;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @ToggleSprint.started += instance.OnToggleSprint;
            @ToggleSprint.performed += instance.OnToggleSprint;
            @ToggleSprint.canceled += instance.OnToggleSprint;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Telekinesis.started += instance.OnTelekinesis;
            @Telekinesis.performed += instance.OnTelekinesis;
            @Telekinesis.canceled += instance.OnTelekinesis;
        }

        private void UnregisterCallbacks(IControlsRightShootActions instance)
        {
            @Forward.started -= instance.OnForward;
            @Forward.performed -= instance.OnForward;
            @Forward.canceled -= instance.OnForward;
            @Backward.started -= instance.OnBackward;
            @Backward.performed -= instance.OnBackward;
            @Backward.canceled -= instance.OnBackward;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @ToggleSprint.started -= instance.OnToggleSprint;
            @ToggleSprint.performed -= instance.OnToggleSprint;
            @ToggleSprint.canceled -= instance.OnToggleSprint;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Telekinesis.started -= instance.OnTelekinesis;
            @Telekinesis.performed -= instance.OnTelekinesis;
            @Telekinesis.canceled -= instance.OnTelekinesis;
        }

        public void RemoveCallbacks(IControlsRightShootActions instance)
        {
            if (m_Wrapper.m_ControlsRightShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsRightShootActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsRightShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsRightShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsRightShootActions @ControlsRightShoot => new ControlsRightShootActions(this);
    public interface IControlsLeftShootActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnToggleSprint(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnTelekinesis(InputAction.CallbackContext context);
    }
    public interface IControlsRightShootActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnToggleSprint(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnTelekinesis(InputAction.CallbackContext context);
    }
}
